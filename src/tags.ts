import type { JSX } from "react";

import { component } from "./core.ts";

/** Factory helper for HTML/SVG tags */
const tag = <TagName extends keyof React.JSX.IntrinsicElements>(
  tagName: TagName,
) => component(tagName, tagName);

export const {
  a: { a, a$, _a, _a$ },
  abbr: { abbr, abbr$, _abbr, _abbr$ },
  address: { address, address$, _address, _address$ },
  area: { area, area$, _area, _area$ },
  article: { article, article$, _article, _article$ },
  aside: { aside, aside$, _aside, _aside$ },
  audio: { audio, audio$, _audio, _audio$ },
  b: { b, b$, _b, _b$ },
  base: { base, base$, _base, _base$ },
  bdi: { bdi, bdi$, _bdi, _bdi$ },
  bdo: { bdo, bdo$, _bdo, _bdo$ },
  big: { big, big$, _big, _big$ },
  blockquote: { blockquote, blockquote$, _blockquote, _blockquote$ },
  body: { body, body$, _body, _body$ },
  br: { br, br$, _br, _br$ },
  button: { button, button$, _button, _button$ },
  canvas: { canvas, canvas$, _canvas, _canvas$ },
  caption: { caption, caption$, _caption, _caption$ },
  cite: { cite, cite$, _cite, _cite$ },
  code: { code, code$, _code, _code$ },
  col: { col, col$, _col, _col$ },
  colgroup: { colgroup, colgroup$, _colgroup, _colgroup$ },
  data: { data, data$, _data, _data$ },
  datalist: { datalist, datalist$, _datalist, _datalist$ },
  dd: { dd, dd$, _dd, _dd$ },
  del: { del, del$, _del, _del$ },
  details: { details, details$, _details, _details$ },
  dfn: { dfn, dfn$, _dfn, _dfn$ },
  dialog: { dialog, dialog$, _dialog, _dialog$ },
  div: { div, div$, _div, _div$ },
  dl: { dl, dl$, _dl, _dl$ },
  dt: { dt, dt$, _dt, _dt$ },
  em: { em, em$, _em, _em$ },
  embed: { embed, embed$, _embed, _embed$ },
  fieldset: { fieldset, fieldset$, _fieldset, _fieldset$ },
  figcaption: { figcaption, figcaption$, _figcaption, _figcaption$ },
  figure: { figure, figure$, _figure, _figure$ },
  footer: { footer, footer$, _footer, _footer$ },
  form: { form, form$, _form, _form$ },
  h1: { h1, h1$, _h1, _h1$ },
  h2: { h2, h2$, _h2, _h2$ },
  h3: { h3, h3$, _h3, _h3$ },
  h4: { h4, h4$, _h4, _h4$ },
  h5: { h5, h5$, _h5, _h5$ },
  h6: { h6, h6$, _h6, _h6$ },
  head: { head, head$, _head, _head$ },
  header: { header, header$, _header, _header$ },
  hgroup: { hgroup, hgroup$, _hgroup, _hgroup$ },
  hr: { hr, hr$, _hr, _hr$ },
  html: { html, html$, _html, _html$ },
  i: { i, i$, _i, _i$ },
  iframe: { iframe, iframe$, _iframe, _iframe$ },
  img: { img, img$, _img, _img$ },
  input: { input, input$, _input, _input$ },
  ins: { ins, ins$, _ins, _ins$ },
  kbd: { kbd, kbd$, _kbd, _kbd$ },
  keygen: { keygen, keygen$, _keygen, _keygen$ },
  label: { label, label$, _label, _label$ },
  legend: { legend, legend$, _legend, _legend$ },
  li: { li, li$, _li, _li$ },
  link: { link, link$, _link, _link$ },
  main: { main, main$, _main, _main$ },
  map: { map, map$, _map, _map$ },
  mark: { mark, mark$, _mark, _mark$ },
  menu: { menu, menu$, _menu, _menu$ },
  menuitem: { menuitem, menuitem$, _menuitem, _menuitem$ },
  meta: { meta, meta$, _meta, _meta$ },
  meter: { meter, meter$, _meter, _meter$ },
  nav: { nav, nav$, _nav, _nav$ },
  noindex: { noindex, noindex$, _noindex, _noindex$ },
  noscript: { noscript, noscript$, _noscript, _noscript$ },
  object: { object, object$, _object, _object$ },
  ol: { ol, ol$, _ol, _ol$ },
  optgroup: { optgroup, optgroup$, _optgroup, _optgroup$ },
  option: { option, option$, _option, _option$ },
  output: { output, output$, _output, _output$ },
  p: { p, p$, _p, _p$ },
  param: { param, param$, _param, _param$ },
  picture: { picture, picture$, _picture, _picture$ },
  pre: { pre, pre$, _pre, _pre$ },
  progress: { progress, progress$, _progress, _progress$ },
  q: { q, q$, _q, _q$ },
  rp: { rp, rp$, _rp, _rp$ },
  rt: { rt, rt$, _rt, _rt$ },
  ruby: { ruby, ruby$, _ruby, _ruby$ },
  s: { s, s$, _s, _s$ },
  samp: { samp, samp$, _samp, _samp$ },
  script: { script, script$, _script, _script$ },
  section: { section, section$, _section, _section$ },
  select: { select, select$, _select, _select$ },
  small: { small, small$, _small, _small$ },
  source: { source, source$, _source, _source$ },
  span: { span, span$, _span, _span$ },
  strong: { strong, strong$, _strong, _strong$ },
  sub: { sub, sub$, _sub, _sub$ },
  summary: { summary, summary$, _summary, _summary$ },
  sup: { sup, sup$, _sup, _sup$ },
  table: { table, table$, _table, _table$ },
  tbody: { tbody, tbody$, _tbody, _tbody$ },
  td: { td, td$, _td, _td$ },
  textarea: { textarea, textarea$, _textarea, _textarea$ },
  tfoot: { tfoot, tfoot$, _tfoot, _tfoot$ },
  th: { th, th$, _th, _th$ },
  thead: { thead, thead$, _thead, _thead$ },
  time: { time, time$, _time, _time$ },
  title: { title, title$, _title, _title$ },
  tr: { tr, tr$, _tr, _tr$ },
  track: { track, track$, _track, _track$ },
  u: { u, u$, _u, _u$ },
  ul: { ul, ul$, _ul, _ul$ },
  var: { var: var_, var$, _var, _var$ },
  video: { video, video$, _video, _video$ },
  wbr: { wbr, wbr$, _wbr, _wbr$ },
  // SVG Elements
  svg: { svg, svg$, _svg, _svg$ },
  animate: { animate, animate$, _animate, _animate$ },
  circle: { circle, circle$, _circle, _circle$ },
  clipPath: { clipPath, clipPath$, _clipPath, _clipPath$ },
  defs: { defs, defs$, _defs, _defs$ },
  desc: { desc, desc$, _desc, _desc$ },
  ellipse: { ellipse, ellipse$, _ellipse, _ellipse$ },
  feBlend: { feBlend, feBlend$, _feBlend, _feBlend$ },
  feColorMatrix: {
    feColorMatrix,
    feColorMatrix$,
    _feColorMatrix,
    _feColorMatrix$,
  },
  feComponentTransfer: {
    feComponentTransfer,
    feComponentTransfer$,
    _feComponentTransfer,
    _feComponentTransfer$,
  },
  feComposite: { feComposite, feComposite$, _feComposite, _feComposite$ },
  feConvolveMatrix: {
    feConvolveMatrix,
    feConvolveMatrix$,
    _feConvolveMatrix,
    _feConvolveMatrix$,
  },
  feDiffuseLighting: {
    feDiffuseLighting,
    feDiffuseLighting$,
    _feDiffuseLighting,
    _feDiffuseLighting$,
  },
  feDisplacementMap: {
    feDisplacementMap,
    feDisplacementMap$,
    _feDisplacementMap,
    _feDisplacementMap$,
  },
  feDistantLight: {
    feDistantLight,
    feDistantLight$,
    _feDistantLight,
    _feDistantLight$,
  },
  feDropShadow: { feDropShadow, feDropShadow$, _feDropShadow, _feDropShadow$ },
  feFlood: { feFlood, feFlood$, _feFlood, _feFlood$ },
  feFuncA: { feFuncA, feFuncA$, _feFuncA, _feFuncA$ },
  feFuncB: { feFuncB, feFuncB$, _feFuncB, _feFuncB$ },
  feFuncG: { feFuncG, feFuncG$, _feFuncG, _feFuncG$ },
  feFuncR: { feFuncR, feFuncR$, _feFuncR, _feFuncR$ },
  feGaussianBlur: {
    feGaussianBlur,
    feGaussianBlur$,
    _feGaussianBlur,
    _feGaussianBlur$,
  },
  feImage: { feImage, feImage$, _feImage, _feImage$ },
  feMerge: { feMerge, feMerge$, _feMerge, _feMerge$ },
  feMergeNode: { feMergeNode, feMergeNode$, _feMergeNode, _feMergeNode$ },
  feMorphology: { feMorphology, feMorphology$, _feMorphology, _feMorphology$ },
  feOffset: { feOffset, feOffset$, _feOffset, _feOffset$ },
  fePointLight: { fePointLight, fePointLight$, _fePointLight, _fePointLight$ },
  feSpecularLighting: {
    feSpecularLighting,
    feSpecularLighting$,
    _feSpecularLighting,
    _feSpecularLighting$,
  },
  feSpotLight: { feSpotLight, feSpotLight$, _feSpotLight, _feSpotLight$ },
  feTile: { feTile, feTile$, _feTile, _feTile$ },
  feTurbulence: { feTurbulence, feTurbulence$, _feTurbulence, _feTurbulence$ },
  filter: { filter, filter$, _filter, _filter$ },
  foreignObject: {
    foreignObject,
    foreignObject$,
    _foreignObject,
    _foreignObject$,
  },
  g: { g, g$, _g, _g$ },
  image: { image, image$, _image, _image$ },
  line: { line, line$, _line, _line$ },
  linearGradient: {
    linearGradient,
    linearGradient$,
    _linearGradient,
    _linearGradient$,
  },
  marker: { marker, marker$, _marker, _marker$ },
  mask: { mask, mask$, _mask, _mask$ },
  metadata: { metadata, metadata$, _metadata, _metadata$ },
  path: { path, path$, _path, _path$ },
  pattern: { pattern, pattern$, _pattern, _pattern$ },
  polygon: { polygon, polygon$, _polygon, _polygon$ },
  polyline: { polyline, polyline$, _polyline, _polyline$ },
  radialGradient: {
    radialGradient,
    radialGradient$,
    _radialGradient,
    _radialGradient$,
  },
  rect: { rect, rect$, _rect, _rect$ },
  stop: { stop, stop$, _stop, _stop$ },
  style: { style, style$, _style, _style$ },
  switch: { switch: switch_, switch$: switch$, _switch, _switch$ },
  symbol: { symbol, symbol$, _symbol, _symbol$ },
  text: { text, text$, _text, _text$ },
  textPath: { textPath, textPath$, _textPath, _textPath$ },
  tspan: { tspan, tspan$, _tspan, _tspan$ },
  use: { use, use$, _use, _use$ },
  view: { view, view$, _view, _view$ },
} = new Proxy(
  {} as {
    [TagName in keyof JSX.IntrinsicElements]: ReturnType<typeof tag<TagName>>;
  },
  {
    get: (_target, p) => tag(p as any), // eslint-disable-line @typescript-eslint/no-explicit-any
  },
);
